* 포인터 : 메모리 주소를 저장하도록 설계, 변수는 데이터 값을 저장, 포인터는 데이터 값이 저장된 변수의 메모리 주소를 저장
* 포인터 선언 : dataType* pVarName;
* 역참조 : 포인터를 통한 값 참조 (*pCount)++; // 간접 참조, pCount가 가리키는 메모리 내의 값을 1 증가
* 포인터 유형 : 변수의 유형이 포인터의 유형과 다른 경우에는 구문 오류가 발생
* 포인터 초기화 : 만일 지역 포인터를 초기화하지 않을 경우에는 지역 변수처럼 지역 포인터에도 임의의 값이 저장, 
초기화되지 않은 포인터를 역참조하면, 치명적인 실행 오류가 발생하거나 실수로 중요한 데이터가 변경될 수 있음
* 한 행에 두 개의 포인터 변수를 int* pI, pJ;로 선언 불가
* typedef : 사용자가 동의어 유형을 정의할 수 있음
* 상수 포인터 : double* const pValue = &radius;
* 괄호([])와 첨자가 없는 배열은 실제로 배열의 시작 주소를 나타냄->포인터
* 배열 포인터 : *는 +보다 우선순위가 높음
* const 매개변수 : 만일 값이 변경되지 X는 경우, 우연히 변경되는 것을 방지하기 위해 const 선언
* 유용한 배열 함수
- 배열 최소, 최대 요소에 대한 포인터 : min/max_element
- 배열 정렬 : sort
- 배열 섞기 : random_shuffle
- 배열 요소 찾기 : find
* 동적 객체 접근 : 포인터를 통한 객체 멤버에 접근하기 위해서는 포인터를 역참조해야하며 객체의 멤버에 대해 .연산자를 사용함
포인터로부터 객체 멤버에 접근하기 위해서 속기 멤버 선택 연산자 사용 ->
* this 포인터 : 함수 내에서 클래스의 숨겨진 데이터 필드를 참조, 숨겨진 데이터 필드는 호출 객체를 참조하는 특별한 내장 포인터인 this 키워드를 사용함으로써 접근

*Quiz 1.
A

*Quiz 2.
B (교재 답)
A, B, C 다 됨 (직접하면), (A, C 허용)
포인터를 통해 해당 변수를 바꾸는게 안 됨
간접참조 X됨(포인터 통해 값 변경 X됨)

*Quiz 3.
B

*Quiz 4.
D

*Quiz 5.
D

*Exercise Quiz
i is 1
j is 2
k is 2
